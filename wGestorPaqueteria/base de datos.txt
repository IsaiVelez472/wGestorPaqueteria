
-- Crear base de datos
CREATE DATABASE GestorPaqueteria;
GO

USE GestorPaqueteria;
GO

-- Tabla de Roles
CREATE TABLE Roles (
    IdRol INT PRIMARY KEY IDENTITY,
    NombreRol NVARCHAR(50) NOT NULL
);

-- Tabla de Usuarios
CREATE TABLE Usuarios (
    IdUsuario INT PRIMARY KEY IDENTITY,
    Usuario NVARCHAR(50) NOT NULL,
    Clave NVARCHAR(50) NOT NULL,
    RolId INT FOREIGN KEY REFERENCES Roles(IdRol) NOT NULL
);

-- Tabla de Clientes
CREATE TABLE Clientes (
    ClienteID INT PRIMARY KEY IDENTITY,
    Nombre NVARCHAR(100) NOT NULL,
    Telefono NVARCHAR(20),
    Email NVARCHAR(100),
    Direccion NVARCHAR(200)
);

-- Tabla de Empleados
CREATE TABLE Empleados (
    EmpleadoID INT PRIMARY KEY IDENTITY,
    Nombre NVARCHAR(100) NOT NULL,
    RolId INT FOREIGN KEY REFERENCES Roles(IdRol),
    Telefono NVARCHAR(20)
);

-- Tabla de Paquetes
CREATE TABLE Paquetes (
    PaqueteID INT PRIMARY KEY IDENTITY,
    NumeroSeguimiento NVARCHAR(50) UNIQUE NOT NULL,
    Peso DECIMAL(10,2),
    Dimensiones NVARCHAR(100),
    ValorDeclarado DECIMAL(10,2),
    Estado NVARCHAR(20) CHECK (Estado IN ('Recibido', 'En tránsito', 'Entregado')),
    RemitenteID INT FOREIGN KEY REFERENCES Clientes(ClienteID),
    DestinatarioID INT FOREIGN KEY REFERENCES Clientes(ClienteID)
);

-- Tabla de Seguimiento
CREATE TABLE Seguimiento (
    SeguimientoID INT PRIMARY KEY IDENTITY,
    PaqueteID INT FOREIGN KEY REFERENCES Paquetes(PaqueteID),
    FechaEvento DATETIME,
    DescripcionEvento NVARCHAR(200),
    Ubicacion NVARCHAR(200)
);

-- Tabla de Asignaciones
CREATE TABLE Asignaciones (
    AsignacionID INT PRIMARY KEY IDENTITY,
    PaqueteID INT FOREIGN KEY REFERENCES Paquetes(PaqueteID) UNIQUE,
    EmpleadoID INT FOREIGN KEY REFERENCES Empleados(EmpleadoID),
    FechaAsignacion DATETIME DEFAULT GETDATE()
);


-- Constraints
ALTER TABLE Seguimiento
ADD CONSTRAINT FK_Seguimientos_Paquetes
FOREIGN KEY (PaqueteID)
REFERENCES Paquetes(PaqueteID)
ON DELETE CASCADE;

ALTER TABLE Asignaciones
ADD CONSTRAINT FK_Asignaciones_Empleado
FOREIGN KEY (EmpleadoID)
REFERENCES Empleados(EmpleadoID)
ON DELETE CASCADE;

ALTER TABLE Asignaciones
ADD CONSTRAINT FK_Asignaciones_Paquetes
FOREIGN KEY (PaqueteID)
REFERENCES Paquetes(PaqueteID)
ON DELETE CASCADE;

ALTER TABLE Paquetes
ADD CONSTRAINT FK_Paquetes_Remitente
FOREIGN KEY (RemitenteID)
REFERENCES Clientes(ClienteID)
ON DELETE CASCADE;

-- Procedimientos Almacenados

-- Login
CREATE PROCEDURE sp_Login
  @Usuario NVARCHAR(50),
  @Clave NVARCHAR(50)
AS
BEGIN
  SELECT u.IdUsuario, u.Usuario, r.NombreRol
  FROM Usuarios u
  INNER JOIN Roles r ON u.RolId = r.IdRol
  WHERE u.Usuario = @Usuario AND u.Clave = @Clave
END;
GO

-- Registrar Paquete
CREATE PROCEDURE sp_RegistrarPaquete
  @NumeroSeguimiento NVARCHAR(50),
  @Peso DECIMAL(10,2),
  @Dimensiones NVARCHAR(100),
  @ValorDeclarado DECIMAL(10,2),
  @RemitenteID INT,
  @DestinatarioID INT
AS
BEGIN
  INSERT INTO Paquetes (NumeroSeguimiento, Peso, Dimensiones, ValorDeclarado, Estado, RemitenteID, DestinatarioID)
  VALUES (@NumeroSeguimiento, @Peso, @Dimensiones, @ValorDeclarado, 'Recibido', @RemitenteID, @DestinatarioID)
END;
GO

-- Eliminar paquete
CREATE PROCEDURE sp_EliminarPaquete
    @IdPaquete INT
AS
BEGIN
    DELETE FROM Paquetes WHERE PaqueteID = @IdPaquete
END;
GO

-- Cambiar estado de paquete
CREATE PROCEDURE sp_CambiarEstadoPaquete
  @PaqueteID INT,
  @NuevoEstado NVARCHAR(20)
AS
BEGIN
  UPDATE Paquetes
  SET Estado = @NuevoEstado
  WHERE PaqueteID = @PaqueteID
END;
GO

-- Registrar evento de seguimiento
CREATE PROCEDURE sp_RegistrarEventoSeguimiento
  @PaqueteID INT,
  @FechaEvento DATETIME,
  @DescripcionEvento NVARCHAR(200),
  @Ubicacion NVARCHAR(200)
AS
BEGIN
  INSERT INTO Seguimiento (PaqueteID, FechaEvento, DescripcionEvento, Ubicacion)
  VALUES (@PaqueteID, @FechaEvento, @DescripcionEvento, @Ubicacion)
END;
GO

-- Asignar paquete a conductor
CREATE PROCEDURE sp_AsignarPaqueteConductor
  @PaqueteID INT,
  @EmpleadoID INT
AS
BEGIN
  IF EXISTS (SELECT 1 FROM Asignaciones WHERE PaqueteID = @PaqueteID)
  BEGIN
    RAISERROR('Este paquete ya ha sido asignado a un conductor.', 16, 1);
    RETURN;
  END

  INSERT INTO Asignaciones (PaqueteID, EmpleadoID)
  VALUES (@PaqueteID, @EmpleadoID)
END;
GO

-- Generar reporte de envíos
CREATE PROCEDURE sp_GenerarReporteEnvios
AS
BEGIN
  SELECT
    p.NumeroSeguimiento,
    p.Estado,
    DATEDIFF(DAY, MIN(s.FechaEvento), MAX(s.FechaEvento)) AS DiasEntrega,
    e.Nombre AS Conductor
  FROM Paquetes p
  LEFT JOIN Seguimiento s ON s.PaqueteID = p.PaqueteID
  LEFT JOIN Asignaciones a ON a.PaqueteID = p.PaqueteID
  LEFT JOIN Empleados e ON e.EmpleadoID = a.EmpleadoID
  WHERE p.Estado = 'Entregado'
  GROUP BY p.NumeroSeguimiento, p.Estado, e.Nombre
END;
GO

-- Datos Iniciales
INSERT INTO Roles (NombreRol) VALUES ('Administrador'), ('Despachador'), ('Conductor');

INSERT INTO Usuarios (Usuario, Clave, RolId) VALUES ('admin', 'admin123', 1);

INSERT INTO Empleados (Nombre, Telefono, RolId) VALUES
('Carlos Torres', '3001234567', 1), -- Administrador
('Laura Gómez', '3012345678', 2),   -- Despachadora
('Luis Pérez', '3023456789', 3);    -- Conductor

INSERT INTO Clientes (Nombre, Telefono, Email, Direccion) VALUES
('Ana Martínez', '3109876543', 'ana.martinez@email.com', 'Calle 10 #20-30, Bogotá'),
('Jorge Ramírez', '3118765432', 'jorge.ramirez@email.com', 'Cra 45 #50-60, Medellín');

INSERT INTO Paquetes (NumeroSeguimiento, Peso, Dimensiones, ValorDeclarado, Estado, RemitenteID, DestinatarioID) VALUES
('PKG001', 2.5, '30x20x15', 150000, 'Recibido', 1, 2),
('PKG002', 1.2, '25x15x10', 75000, 'Recibido', 2, 1);

INSERT INTO Asignaciones (PaqueteID, EmpleadoID, FechaAsignacion) VALUES
(3, 3, GETDATE()),
(4, 3, GETDATE());

-- Evento de recepción
INSERT INTO Seguimiento (PaqueteID, FechaEvento, DescripcionEvento, Ubicacion) VALUES
(3, GETDATE(), 'Paquete recibido en oficina principal', 'Bogotá'),
(4, GETDATE(), 'Paquete recibido en oficina principal', 'Medellín');

-- Evento de despacho
INSERT INTO Seguimiento (PaqueteID, FechaEvento, DescripcionEvento, Ubicacion) VALUES
(3, DATEADD(HOUR, 3, GETDATE()), 'Despachado hacia destino', 'Ruta Bogotá-Medellín');

----------------------------------Datos de pruebas------------------

-- Ejecutar prueba de login
EXEC sp_Login @Usuario = 'admin', @Clave = 'admin123';

select * from Roles;
select * from Usuarios;
select * from Clientes;
select * from Empleados;
select * from Paquetes;
select * from Asignaciones;
select * from Seguimiento;

delete from Asignaciones;
delete from Seguimiento;
delete from Paquetes;

-- NUEVAS COSAS -------------------------------------------------------------------------------------------------------------

--Agregar Cliente


DROP PROCEDURE IF EXISTS sp_RegistrarEmpleado 
GO

CREATE PROCEDURE sp_Registrarcliente
  @Nombre NVARCHAR(100),
  @Telefono  NVARCHAR(20),
  @Email NVARCHAR(100),
  @Direccion NVARCHAR(200)
AS
BEGIN
  INSERT INTO Clientes(Nombre, Telefono, Email, Direccion)
  VALUES ( @Nombre, @Telefono, @Email, @Direccion)
END;
GO
--Asignaciones

CREATE VIEW Vista_PaquetesAsignados AS
SELECT 
    a.EmpleadoID,
    a.AsignacionID,
    a.PaqueteID,
    p.NumeroSeguimiento,
    p.Estado,

    -- Fecha del último evento
    MAX(s.FechaEvento) AS UltimaFechaEvento,

    -- Remitente
    remitente.ClienteID AS RemitenteID,
    remitente.Nombre AS RemitenteNombre,
    remitente.Direccion AS DireccionRemitente,

    -- Destinatario
    destinatario.ClienteID AS DestinatarioID,
    destinatario.Nombre AS DestinatarioNombre,
    destinatario.Direccion AS DireccionDestinatario

FROM Asignaciones a
INNER JOIN Paquetes p ON a.PaqueteID = p.PaqueteID
INNER JOIN Clientes remitente ON p.RemitenteID = remitente.ClienteID
INNER JOIN Clientes destinatario ON p.DestinatarioID = destinatario.ClienteID
INNER JOIN Seguimiento s ON p.PaqueteID = s.PaqueteID
GROUP BY 
    a.EmpleadoID,
    a.AsignacionID,
    a.PaqueteID,
    p.NumeroSeguimiento,
    p.Estado,
    remitente.ClienteID,
    remitente.Nombre,
    remitente.Direccion,
    destinatario.ClienteID,
    destinatario.Nombre,
    destinatario.Direccion;